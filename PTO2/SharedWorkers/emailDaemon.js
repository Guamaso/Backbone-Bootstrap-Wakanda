/*** @author david robbins <drobbins@4d.com>*//*        Here, we add the "onconnect" function to this worker (== to this .js file)It's in this function that we receive messages from other threads, other workers,asking us to do something*/function onconnect(msg) { // called when a new SharedWorker is created.	 // In a SharedWorker, we get the communication port in evt.ports[0]    var thePort = msg.ports[0];        thePort.onmessage = function(messageEvt)    {		// The message is in the "data" member of the argument	    var message = messageEvt.data;	   	// The caller is supposed to have set a "what" property, to tell us what	   	// he wants us to do. We dispatch the message and act accordingly.	   	// Notice that the caller can set more properties in messageEvt.	   		   	switch(message.what) 	    {			case 'requestPTOSendMail':			try             {            	var theRequestor = ds.User(message.requestorID),            	myManager = theRequestor.myManager,            	myManagerEmail = myManager.email;            			        var username = 'wakandaptodemo'; // enter a valid account here		        var password = '01Wakanda01';  // enter a valid password here		        var address = 'smtp.gmail.com';		        var port = 465;  // SSL port		        var mail = require('waf-mail/mail');		        //var recip = "drobbins@4d.com";		        var recip = new Array(myManagerEmail);		        		        var mailMessage = new mail.Mail();		        mailMessage.setBodyType("text/html");		        mailMessage.from= username + '@gmail.com';		        mailMessage.to=recip;		        mailMessage.subject = "PTO2 Test";		        mailMessage.setBodyTypeToHTML();		        mailMessage.setBody('<html><b>Backbone Bootstrap Wakanda</b><br/>What a great combination.<br/><br/></html>'); 		        var res = mailMessage.send(address, port , true, username, password);		        		        new ds.Log({		        	createDate: new Date(), 	                kind: res.action		        }).save();			} 						catch (err)            {    	            new ds.Log({	                createDate: new Date(), 	                kind: err.message//	                message: err.message,//	                line: err.line,//	                name: err.name,//	                sourceID: err.sourceID,//	                sourceURL: err.sourceURL	            }).save();            }	        break;		} //end - switch(message.what).               } //end - thePort.onmessage = function(messageEvt).       } //end - function onconnect(msg).