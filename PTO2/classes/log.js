//Creating the Log classmodel.Log = new DataClass("Logs");//Add Log attributes.model.Log.id = new Attribute("storage", "long", "key auto");model.Log.kind = new Attribute("storage", "string");model.Log.errorMsg = new Attribute("storage", "string");model.Log.createDate = new Attribute("storage", "date", "btree");model.Log.createDateStr = new Attribute("calculated", "string");model.Log.dataClassName = new Attribute("storage", "string");model.Log.eventName = new Attribute("storage", "string");model.Log.userName = new Attribute("storage", "string");model.Log.ownerName = new Attribute("storage", "string");model.Log.userId = new Attribute("storage", "uuid");model.Log.entity_toJSON = new Attribute("storage", "string");model.Log.old_entity_toJSON = new Attribute("storage", "string");/* For Try Catch */model.Log.message = new Attribute("storage", "string");model.Log.line = new Attribute("storage", "long");model.Log.name = new Attribute("storage", "string");model.Log.sourceID = new Attribute("storage", "string");model.Log.sourceURL = new Attribute("storage", "string");//Request attrs.model.Log.requestId = new Attribute("storage", "long");//Calculated Attributes.model.Log.createDateStr.onGet = function() {	return moment(ds.Log.all()[0].createDate).format("MM/DD/YYYY");};/*	new ds.Log({		createDate: new Date(), 		message: err.message,		line: err.line,		name: err.name,		sourceID: err.sourceID,		sourceURL: err.sourceURL	}).save();		*/