var PTO = (function() {	var ptoUtilObj = {}; //This is the object we will return to create our module.	//P R I V A T E   M E T H O D S   (S T A R T).    //P R I V A T E   M E T H O D S   (E N D).            //Backbone Objects.    ptoUtilObj.Models = {};     ptoUtilObj.Collections = {};     ptoUtilObj.Views = {};     ptoUtilObj.Router = {};     //Other stuff.    ptoUtilObj.Utility = {};     //Basic Pub Sub model.    //May be useful in our Backbone router.    ptoUtilObj.vent = _.extend({}, Backbone.Events);    ptoUtilObj.setCalendar = function(requestDateInput$, dayName$, currentDayMoment) {        // requestDateInput$ is the jQuery ref to our date input element.        // dayName$ is a jQuery ref to the day name label that is appended to our date input field.        PTO.holidayCollection.fetch({            success: function(theHolidayCollection) {                PTO.requestCollection.fetch({                    success: function(theRequestCollection) {                        var holidaysArr = theHolidayCollection.toJSON().map(function(oneDay) {return oneDay.dateString;});                        var requestsArr = theRequestCollection.toJSON().map(function(oneDay) {return oneDay.dateString;});                        //instantiate our date picker.                        requestDateInput$.datepicker("destroy");                        requestDateInput$.datepicker({                            beforeShowDay: function(date){                                var holidayDateString = jQuery.datepicker.formatDate('mm/dd/yy', date);                                if ((date.getDay() === 6) || (date.getDay() === 0)) {                                    //Weekends are not selectable.                                    return [false];                                } else if (holidaysArr.indexOf(holidayDateString) !== -1) {                                    //Neither are holidays.                                    return [false, 'holiday'];                                  } else if (requestsArr.indexOf(holidayDateString) !== -1) {                                    //Neither are holidays.                                    return [false, 'vacation'];                                 } else {                                    return [true];                                }                            },                            onSelect: function(dateSelectedStr, datePickerObj) {                                dayName$.html(moment(dateSelectedStr).format('dddd'));                                //PTO.dayName$.html(moment(dateSelectedStr).format('dddd'));                            }                        }); //end - $( "#requestDate" ).datepicker().                                                //Skip holidays, weekends, and current requests.                        var holidaysArr =   theHolidayCollection.toJSON().map(function(oneDay) {return oneDay.dateString;}),                            requestArr  =    theRequestCollection.toJSON().map(function(oneDay) {return oneDay.dateString;}),                            keepLooking = true;                                                while (keepLooking) {                            if (holidaysArr.indexOf(currentDayMoment.format("MM/DD/YYYY")) !== -1) {                                    currentDayMoment.add('days', 1);                            } else if (requestsArr.indexOf(currentDayMoment.format("MM/DD/YYYY")) !== -1) {                                    currentDayMoment.add('days', 1);                            } else if (currentDayMoment.day() == 6) { // 6 is SaturdayMaybe 5???                                    currentDayMoment.add('days', 2);                            } else if (currentDayMoment.day() == 0) { //0 is Sunday.                                    currentDayMoment.add('days', 1);                            } else {                                    keepLooking = false;                            }                          } //end while()                        requestDateInput$.val(currentDayMoment.format("MM/DD/YYYY"));                        dayName$.html(currentDayMoment.format('dddd'));                                           } //end - PTO.requestCollection.fetch({success()}).                }); //end - PTO.requestCollection.fetch();            } //end - PTO.holidayCollection.fetch({success()}).        }); //end - PTO.holidayCollection.fetch();    }; //end - setCalendar();    // ptoUtilObj.pagingButtonSetDisabled = function(theCollection, theButton$, type) {    //     if (type === "prev") {    //         //set the prev button.    //         if (theCollection.collectionFirst === 0) {    //             theButton$.attr("disabled", "disabled");    //         } else {    //             theButton$.removeAttr("disabled");        //         }    //         //set the next button.    //         if (theCollection.collectionFirst + theCollection.collectionSent >= theCollection.collectionCount) {    //             theButton$.siblings('.nextRequests').attr("disabled", "disabled");    //         } else {    //             theButton$.siblings('.nextRequests').removeAttr("disabled");        //         }    //     }    //     if (type === "next") {    //         //set the next button.    //        if (theCollection.collectionFirst + theCollection.collectionSent >= theCollection.collectionCount) {    //             theButton$.attr("disabled", "disabled");    //         } else {    //             theButton$.removeAttr("disabled");        //         }    //         //set the prev button.    //         if (theCollection.collectionFirst === 0) {    //             theButton$.siblings('.prevRequests').attr("disabled", "disabled");    //         } else {    //             theButton$.siblings('.prevRequests').removeAttr("disabled");        //         }    //     }            // }; //end - ptoUtilObj.pagingButtonSetDisabled    ptoUtilObj.wakandaQueryURLString = function (configObj) {        var urlString = "rest/" + configObj.dataClass + "/";        urlString += "?$top=" + configObj.top;        if (configObj.skip) {           urlString += "&$skip=" + configObj.skip;         }        if (configObj.orderBy) {            //&$orderby=dateRequested%20asc            urlString += "&$orderby=" + configObj.orderBy;         }                if (configObj.filter == "$all") {            urlString += "&$savedfilter='" + encodeURIComponent(configObj.filter) + "'";        } else {            urlString += "&$savedfilter='" + encodeURIComponent(configObj.filter) + "'";            urlString += "&$filter='" + encodeURIComponent(configObj.filter) + "'";        }                //Build params.        if (arguments.length > 1) {            urlString += encodeURI("&$params='[");            var parmsString = "";            for(var arg = 1, len = arguments.length; arg < len; ++ arg) {                var parm = arguments[arg];                if (_.isString(parm)) {                    parmsString += "\"" + parm + "\"";                } else if (_.isNumber(parm)) {                } else if (_.isDate(parm)) {                    parmsString += "\"" + moment(parm).format() + "\"";                }                if (arg < len -1) {                   parmsString += ",";                 }            } //end - for.            urlString += encodeURIComponent(parmsString);            urlString += encodeURI("]'");          } else {            urlString += encodeURI("&$params='[");            urlString += encodeURI("]'");         } //if (arguments.length > 1)                 // urlString += encodeURI("&$params='[") + encodeURIComponent(configObj.params) + encodeURI("]'");        urlString += "&$method=entityset&$timeout=" + configObj.timeout;        //Hack Refactor        if (configObj.dataClass == "Request") {            urlString += "&$expand=owner, owner.myManager";        }                return urlString;    }	return ptoUtilObj;   }()); //end - PTO.